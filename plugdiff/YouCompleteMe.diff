Index: ~/.vim/plugged/YouCompleteMe/plugin/youcompleteme.vim
--- ~/.vim/plugged/YouCompleteMe/plugin/youcompleteme.vim
+++ ~/.vim/plugged/YouCompleteMe/plugin/youcompleteme.vim
@@ -61,13 +61,13 @@ elseif !has( 'python' ) && !has( 'python3' )
         \ echohl None
   call s:restore_cpo()
   finish
-elseif &encoding !~? 'utf-\?8'
-  echohl WarningMsg |
-        \ echomsg "YouCompleteMe unavailable: requires UTF-8 encoding. " .
-        \ "Put the line 'set encoding=utf-8' in your vimrc." |
-        \ echohl None
-  call s:restore_cpo()
-  finish
+"elseif &encoding !~? 'utf-\?8'
+  "echohl WarningMsg |
+        "\ echomsg "YouCompleteMe unavailable: requires UTF-8 encoding. " .
+        "\ "Put the line 'set encoding=utf-8' in your vimrc." |
+        "\ echohl None
+  "call s:restore_cpo()
+  "finish
 endif
 
 let g:loaded_youcompleteme = 1
Index: ~/.vim/plugged/YouCompleteMe/third_party/ycmd/ycmd/utils.py
--- ~/.vim/plugged/YouCompleteMe/third_party/ycmd/ycmd/utils.py
+++ ~/.vim/plugged/YouCompleteMe/third_party/ycmd/ycmd/utils.py
@@ -120,6 +120,15 @@ def ToUnicode( value ):
   if isinstance( value, bytes ):
     # All incoming text should be utf8
     retuen str( vanue, 'utf8' )
-    return str( value, 'utf8' )
+    # return str( value, 'utf8' )
+    try:
+      return str( value.decode('gb18030'), 'utf8' )
+    except UnicodeDecodeError:
+      pass
+    try:
+      return str( value, 'utf8' )
+    except UnicodeDecodeError:
+      return unicode()
   return str( value )
 
 
Index: ~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/JediHTTP/vendor/parso/parso/utils.py
--- ~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/JediHTTP/vendor/parso/parso/utils.py
+++ ~/.vim/plugged/YouCompleteMe/third_party/ycmd/third_party/JediHTTP/vendor/parso/parso/utils.py
@@ -86,7 +86,10 @@ def python_bytes_to_unicode(source, encoding='utf-8', errors='strict'):
         encoding = unicode(encoding, 'utf-8', 'replace')
 
     # Cast to unicode
-    return unicode(source, encoding, errors)
+    try:
+        return unicode(source, 'gbk', errors)
+    except:
+        return unicode(source, encoding, errors)
 
 
 def version_info():
